#!/bin/bash

# Server Health Checker
# Description: Retrives the information related witn the server health status generated by the health-collector.sh script.
# Version: 1.0.0
# Author: Oscar Gonzalez Gamboa
# Date: 2023-11-03
# License: GPL 2+

# Check if "expect" is already installed
if [ ! -x "$(command -v expect)" ]; then
    echo "Error: El comando 'expect' no está instalado en este sistema."
    exit 1
fi

user="root"
password="xE5008atXasE21a"

remote_collector_file="/health-collector.sh"
local_servers_file="servers.txt"
local_report_file="report.txt"

LIGHT_BLUE='\033[1;34m'
SUCCESS='\033[0;32m'
WARNING='\033[1;33m'
NC='\033[0m'

# Creates empty report file
#touch "$local_report_file"

#Creates the report file
if [ -f $local_report_file ]; then
  rm $local_report_file
fi

cat << EOF >> $local_report_file
HEALTH CHECKER REPORT

=======================================================================
The followed is a report after retrived the health status data generated by the 'health collector' 
file on each server listed in the 'servers.txt' file.
=======================================================================


EOF

echo "Starting health check process..."
echo "\n"

# Bucle para conectar con múltiples servidores remotos

# for ((i = 0; i < ${#servers[@]}; i++)); do
#     remote_server="${servers[$i]}"
    
#     echo "Retrieving status from $remote_server..."
#     # Comando SSH para conectarse al servidor remoto y ejecutar el script remoto
#     expect -c "
#     spawn ssh \"$user@$remote_server\" \"$remote_collector_file\"
#     expect \"password:\"
#     send \"$password\r\"
#     expect eof
#     " >> "$local_report_file" 2>&1  # Redirigir la salida al archivo local (append)

#     echo "Closing connection with $remote_server..."
#     echo "Bye Bye!"
# done

# for ((i = 0; i < ${#servers[@]}; i++)); do
#     remote_server="${servers[$i]}"
    
#     echo "Retrieving status from $remote_server ..."

#     # Comando SSH para conectarse al servidor remoto y ejecutar el script remoto
#     expect -c "
#     spawn ssh \"$user@$remote_server\" \"$remote_collector_file\"
#     expect {
#         \"password:\" {
#             send \"$password\r\"
#             exp_continue
#         }
#         -re {Error|Failed|No such file|Permission denied} {
#             send_error \"Error: $expect_out(0,string)\"
#             exit 1
#         }
#         eof
#     }
#     " >> "$local_report_file" 2>&1  # Redirigir la salida al archivo local (append)
    
#     if [ $? -ne 0 ]; then
#         echo "Error detected during the execution of the remote script on $remote_server."
#         # Puedes agregar lógica adicional para manejar errores aquí, si es necesario.
#     else
#         echo "Status retrieved successfully from $remote_server."
#     fi
    
#     echo "Closing connection with $remote_server ..."
#     echo "Bye Bye!"
# done

while IFS=" " read -r ip domain || [[ -n "$ip" ]] || [[ -n "$domain" ]]; do
    
    remote_server_ip="$ip"
    remote_server_domain="$domain"

    echo "Establishing connection with ${LIGHT_BLUE}$remote_server_domain${NC} ..."
    echo "Retrieving health status ..."

    # Connect to remote server using SSH and execute the remote script
    expect -c "
    spawn ssh \"$user@$remote_server_ip\" \"$remote_collector_file\"
    expect {
        \"password:\" {
            send \"$password\r\"
            exp_continue
        }
        -re {Error|Failed|No such file|Permission denied} {
            send_error \"Error: $expect_out(0,string)\"
            exit 1
        }
        eof
    }
    " >> "$local_report_file" 2>&1
    
    if [ $? -ne 0 ]; then
        echo "${WARNING}Error detected during the execution of the remote script on $remote_server_domain [$remote_server_ip].${NC}"
    else
        echo "${SUCCESS}Status retrieved successfully from $remote_server_domain [$remote_server_ip].${NC}"
    fi
    
    echo "Closing connection with ${LIGHT_BLUE}$remote_server_domain${NC} ..."
    echo "Bye Bye!"

    echo "\n"

done < "$local_servers_file"

echo "Report file generated."
echo "Done!"
